#!/usr/bin/env bash
# config bootstrap script (README doubles as documentation and installer)
#
# Run with:
#   curl -fsSL https://raw.githubusercontent.com/crypdick/config/master/README | bash
#
# Environment overrides:
#   REPO_URL         - alternate git remote (default: https://github.com/crypdick/config.git)
#   CFG_DIR          - where to store the bare repo (default: $HOME/.cfg)
#   CONFIG_WORKTREE  - checkout target (default: $HOME)
#   BACKUP_DIR       - backup location for conflicting files (default: $HOME/.config-backup)
#   INSTALL_OHMYZSH  - set to 0 to skip optional Oh My Zsh install

set -euo pipefail

REPO_URL="${REPO_URL:-https://github.com/crypdick/config.git}"
CFG_DIR="${CFG_DIR:-$HOME/.cfg}"
CONFIG_WORKTREE="${CONFIG_WORKTREE:-$HOME}"
BACKUP_DIR="${BACKUP_DIR:-$HOME/.config-backup}"
INSTALL_OHMYZSH="${INSTALL_OHMYZSH:-1}"

log() {
  printf '\n==> %s\n' "$*"
}

have() {
  command -v "$1" >/dev/null 2>&1
}

run_with_sudo() {
  if have sudo && [[ ${EUID:-0} -ne 0 ]]; then
    sudo "$@"
  else
    "$@"
  fi
}

install_homebrew() {
  if have brew; then
    return
  fi
  log "Installing Homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if [[ -x /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -x /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
}

install_packages() {
  if have apt-get; then
    log "Installing packages with apt-get"
    run_with_sudo apt-get update
    run_with_sudo apt-get install -y git zsh curl vim fzf direnv autojump bat ripgrep
  elif have brew; then
    log "Installing packages with Homebrew"
    brew update --quiet || true
    brew install git zsh curl vim fzf direnv zoxide bat ripgrep || true
    if ! have autojump && brew info autojump >/dev/null 2>&1; then
      brew install autojump || true
    fi
  else
    log "No supported package manager detected (apt-get or Homebrew). Skipping package installation."
  fi
}

ensure_prerequisites() {
  if [[ "$OSTYPE" == darwin* ]]; then
    install_homebrew
  fi
  install_packages

  if ! have git; then
    log "git is required but not installed. Install git manually and re-run."
    exit 1
  fi
  if ! have curl; then
    log "curl is required but not installed. Install curl manually and re-run."
    exit 1
  fi
}

ensure_zsh_default() {
  if ! have zsh; then
    log "zsh not found; skipping chsh step. Install zsh and re-run if desired."
    return
  fi
  local target_shell
  target_shell="$(command -v zsh)"
  if [[ -z "${SHELL:-}" || "${SHELL}" != "$target_shell" ]]; then
    log "Attempting to set default shell to zsh"
    if chsh -s "$target_shell" >/dev/null 2>&1; then
      log "Default shell changed to zsh"
    else
      log "Could not change shell automatically; run 'chsh -s $target_shell' later."
    fi
  fi
}

install_oh_my_zsh() {
  if [[ "$INSTALL_OHMYZSH" != "1" ]]; then
    return
  fi
  if [[ -d "$HOME/.oh-my-zsh" ]]; then
    log "Oh My Zsh already present; skipping install"
    return
  fi
  if ! have curl; then
    log "curl not available; cannot install Oh My Zsh automatically"
    return
  fi
  log "Installing Oh My Zsh"
  RUNZSH=no CHSH=no KEEP_ZSHRC=yes \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}

ensure_zsh_plugins() {
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    log "Oh My Zsh not detected; skipping plugin clones"
    return
  fi
  local base="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins"
  mkdir -p "$base"

  clone_or_update() {
    local name="$1" repo="$2" path="$base/$1"
    if [[ -d "$path/.git" ]]; then
      log "Updating $name"
      git -C "$path" pull --ff-only || log "Warning: could not update $name"
    else
      log "Cloning $name"
      git clone --depth 1 "$repo" "$path"
    fi
  }

  clone_or_update zsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions.git
  clone_or_update zsh-syntax-highlighting https://github.com/zsh-users/zsh-syntax-highlighting.git
}

bootstrap_dotfiles() {
  log "Cloning dotfiles (bare repo)"
  if [[ ! -d "$CFG_DIR" ]]; then
    git clone --bare "$REPO_URL" "$CFG_DIR"
  else
    log "Bare repo already exists at $CFG_DIR; fetching updates"
    git --git-dir="$CFG_DIR" --work-tree="$CONFIG_WORKTREE" fetch --all --prune
  fi

  config() {
    git --git-dir="$CFG_DIR" --work-tree="$CONFIG_WORKTREE" "$@"
  }

  mkdir -p "$BACKUP_DIR"
  log "Checking out tracked files into $CONFIG_WORKTREE"
  tmpfile=$(mktemp)
  if ! config checkout 2>"$tmpfile"; then
    log "Backing up pre-existing dotfiles into $BACKUP_DIR"
    while IFS= read -r path; do
      path="${path#\t}"
      if [[ -n "$path" ]]; then
        mkdir -p "$BACKUP_DIR/$(dirname "$path")"
        mv "$CONFIG_WORKTREE/$path" "$BACKUP_DIR/$path" 2>/dev/null || true
      fi
    done < <(grep -E "\s+\." "$tmpfile")
  fi
  rm -f "$tmpfile"
  config checkout
  config config status.showUntrackedFiles no
}

post_install_notes() {
  cat <<'EON'

Next steps:
  - Secrets: copy ~/.config/zsh/secrets.zsh.example to ~/.config/zsh/secrets.zsh and add API keys (kept out of git).
  - Vim: configuration is lightweight and plugin-free; launch vim to confirm settings and add your own extras if desired.
  - Optional tools: direnv, zoxide, and fzf keybindings activate automatically when the commands exist.
  - Oh My Zsh plugins zsh-autosuggestions and zsh-syntax-highlighting live in ~/.oh-my-zsh/custom/plugins; pull updates per plugin when needed.

Use the "config" wrapper (git --git-dir=$HOME/.cfg --work-tree=$HOME) to manage dotfiles:
  config status
  config pull --rebase
  config commit -am "message"

Happy hacking!
EON
}

main() {
  ensure_prerequisites
  ensure_zsh_default
  install_oh_my_zsh
  ensure_zsh_plugins
  bootstrap_dotfiles
  post_install_notes
}

main
