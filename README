# config

sudo apt install curl

# run this README with
# curl https://raw.githubusercontent.com/crypdick/config/master/README | bash


echo "##### THINGS TO INSTALL EVERYWHERE ###"

echo "setup vanilla shell before overwriting it when pulling config "
sudo apt update && sudo apt -y upgrade
sudo apt -y install git zsh zsh-syntax-highlighting vim python-pygments autojump

#https://github.com/eyenx/omzsh
# TODO: check first
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md
#source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md
# TODO: check first
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
source ~/.zshrc

echo "fetching config repo from github"
# based on https://www.atlassian.com/git/tutorials/dotfiles
# TODO: check first, if already present just config pull
git clone --bare https://github.com/crypdick/config.git $HOME/.cfg

# define config in current scope
function config {
   /usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME $@
}
mkdir -p .config-backup

# checkout bare repo to home
config checkout -f
# but, if there are errors, back up config and then re-run checkout
if [ $? = 0 ]; then
  echo "Checked out config.";
  else
    echo "Backing up pre-existing dot files.";
    config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
fi;
config checkout

config config status.showUntrackedFiles no


echo "install Vundle"
# TODO check first
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
#vim -c VundleUpdate -c quitall


# TODO git pull vimwiki
# TODO set vimwiki to autocommit: https://dmoerner.wordpress.com/2017/08/14/vimwiki-and-git-autocommit/

# fzf before source
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install --all

source ~/.zshrc

# unattended upgrades
sudo apt -y install unattended-upgrades
sudo dpkg-reconfigure --priority=low unattended-upgrades

# TODO what is this about
echo "edit /var/run/reboot-required"


# Apt packages
sudo apt install docker scrot ranger  sshfs

# eternal terminal stuff
sudo apt-get install -y software-properties-common
sudo add-apt-repository ppa:jgmath2000/et
sudo apt-get update
sudo apt-get install et
echo "don't forget to add firewall rules for Eternal Terminal, sshfs"



########### GUI stuff  ############# TODO make flag
# https://github.com/powerline/fonts
sudo apt install i3 i3-wm i3lock i3blocks conky nitrogen compton guake lightdm vlc gnome-system-monitor gsimplecal mouspad fonts-font-awesome fonts-powerline

## if fontawesome is not working
#wget "https://use.fontawesome.com/releases/v5.0.13/fontawesome-free-5.0.13.zip"
#unzip fontawesome-free-5.0.13.zip
#sudo cp fontawesome-free-5.0.13/use-on-desktop/* /usr/local/share/fonts/
#rm -rf fontawesome-free*
#fc-cache -f -v
#the next command help see the name to use-on-desktop
#here Font Awesome 5 Free
#fc-list | grep -i "awe"

echo "change the following in guake:"
echo "toggle to mod+Enter and autostart. Change to Desert theme. Disable popup notification, hide tray icon."
echo "keybindings: Ctrl-C to copy, Ctrl-V to paste, Ctrl-T new tab, Ctrl+Shift+T close tab, switch tabs Alt-left or right, move tabs with Ctrl+Alt_left or right. Rename Ctrl-R."
echo "change font to Powerline font."

echo "installing i3-gaps"
#https://github.com/pasiegel/i3-gaps-install-ubuntu
#Make sure to install dependencies first
#https://github.com/Airblader/i3/wiki/Compiling-&-Installing
sudo apt  -y install libxcb1-dev libxcb-keysyms1-dev libpango1.0-dev libxcb-util0-dev libxcb-icccm4-dev libyajl-dev libstartup-notification0-dev libxcb-randr0-dev libev-dev libxcb-cursor-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev autoconf xutils-dev libtool
cd /tmp
git clone https://www.github.com/Airblader/i3 i3-gaps
cd i3-gaps
git checkout gaps && git pull
autoreconf --force --install
rm -rf build
mkdir build
cd build
../configure --prefix=/usr --sysconfdir=/etc
make
sudo make install
cd ~


## Pycharm
echo "download pycharm at https://www.jetbrains.com/pycharm/download/#section=linux"
echo "Theme: Dracula. +fontsize. Change default to Anaconda."

echo "open nitrogen, set a wp"


echo "##### DEEP LEARNING NODE SET-UP  ######  TODO flag"
echo "if not using AMI that comes with CUDA, see here:"
echo "https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e"

# Python
# latest version at  https://www.anaconda.com/download/#linux
curl https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh -o anaconda.sh
bash anaconda.sh -b -p $HOME/src/anaconda3
rm -f anaconda.sh
source .zshrc
pip install --upgrade pip
#conda update --all
pip install tensorflow-gpu tqdm bs4 dash boto3 plotly pyspark seaborn fire torch


#### clean up
sudo apt -y autoremove


##### GRAVEYARD   ######

## voice2code


### docker
#https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

### pyaudio 
#https://gist.github.com/diegopacheco/d5d4507988eff995da297344751b095e


### silvius-crypdick

#xdotool

#https://github.com/crypdick/silvius-crypdick

## break reminders

#https://github.com/hovancik/stretchly/

## music

# `youtube-dl  --extract-audio  --audio-format  best --embed-thumbnail --external-downloader aria2c --external-downloader-args '--max-connection-per-server=15' --yes-playlist  "https://www.youtube.com/watch?v=lNmrCMCvbFg&list=PLhb-iq93UfDnE3wY1769ahvlNmXr2zMp0"`

#https://github.com/rg3/youtube-dl/issues/350#issuecomment-244847884
#aria2c --max-concurrent-downloads=10 --max-connection-per-server=20 `youtube-dl -g https://www.youtube.com/playlist?list=PLsPUh22kYmNBkabv9M4fXo6HMLKnc7iR6`

